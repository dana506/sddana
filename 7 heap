#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <malloc.h>
#include <string.h>
#include <stdlib.h>

union Reference
{
	unsigned char intRef;
	unsigned short extRef;
};

typedef union Reference RefInfo;

struct Student
{
	char* name;
	double income;
	RefInfo reference;
};

typedef struct Student StudentInfo;

struct PrioQ
{
	StudentInfo** items;
	int currentIndex;
	int queueSize;
};

typedef struct PrioQ PrioQueue;

//useful info memory management
StudentInfo* createStudentInfo(const char*, double, unsigned short);
void* deleteStudentInfo(StudentInfo*);
void displayStudents(StudentInfo**, int);
void displayStudent(StudentInfo*);
void enqueue(PrioQueue*, StudentInfo*);
StudentInfo* dequeue(PrioQueue*);
void changePrio(PrioQueue*, int, char);
void ReHeapUp(PrioQueue*, int);
void ReHeapDown(PrioQueue*, int);

#define LINE_SIZE 128
#define INITIAL_PQUEUE_SIZE 7

void main()
{
	FILE* pFile = fopen("Data.txt", "r");
	PrioQueue prioQueue = { .currentIndex = 0, .queueSize = 0, .items = NULL };
	if (pFile)
	{
		StudentInfo* agenda[10];
		memset(agenda, 0, sizeof(agenda));
		char* token; char delimiter[] = ",\n";
		double income; unsigned short ref;
		char lineBuffer[LINE_SIZE], name[LINE_SIZE];
		int index = 0;
		while (fgets(lineBuffer, sizeof(lineBuffer), pFile))
		{
			token = strtok(lineBuffer, delimiter);
			strcpy(name, token);
			token = strtok(NULL, delimiter);
			income = atof(token);
			token = strtok(NULL, delimiter);
			ref = atoi(token);
			StudentInfo* stud = createStudentInfo(name, income, ref);
			enqueue(&prioQueue, stud);
			//agenda[index++] = stud;
		}
		//StudentInfo* info = NULL;
		//while ((info = dequeue(&prioQueue)) != NULL)
		//{
		//	displayStudent(info);
		//}

		for (int i = 0; i < prioQueue.queueSize; i++)
		{
			if (prioQueue.items[i] != NULL)
			{
				displayStudent(prioQueue.items[i]);
			}
		}
		index = 2;
		short newPrio = 5;
		changePrio(&prioQueue, index, newPrio);
		for (int i = 0; i < prioQueue.queueSize; i++)
		{
			if (prioQueue.items[i] != NULL)
			{
				displayStudent(prioQueue.items[i]);
			}
		}
		//displayStudents(agenda, sizeof(agenda) / sizeof(StudentInfo*));
		fclose(pFile);
	}
}


StudentInfo* createStudentInfo(const char* name, double income, unsigned short ref)
{
	StudentInfo* result = NULL;
	result = (StudentInfo*)malloc(sizeof(StudentInfo));
	result->name = (char*)malloc(strlen(name) + 1);
	strcpy(result->name, name);
	result->income = income;
	result->reference.extRef = ref;
	return result;

}

void* deleteStudentInfo(StudentInfo* stud)
{
	if (stud != NULL)
	{
		free(stud->name);
		free(stud);
	}
	return NULL;
}

void displayStudents(StudentInfo** agenda, int noEl)
{
	for (int i = 0; i < noEl; i++)
	{
		displayStudent(agenda[i]);
	}
}

void displayStudent(StudentInfo* stud)
{
	if (stud)
	{
		printf("Name: %s, income: %f\n", stud->name, stud->income);
		if (stud->reference.extRef >> 15 == 1)
		{
			short uid = stud->reference.extRef >> 8 & 127;
			printf("University ref: %d\n", uid);
			printf("External ref: %d\n", stud->reference.extRef & 255);
		}
		else
		{
			printf("Internal ref: %d\n", stud->reference.intRef);
		}
	}
}

void ReHeapUp(PrioQueue* pQueue, int currentIndex)
{
	if (currentIndex > 0)
	{
		int parentIndex = (currentIndex - 1) / 2;
		short parentRef = 0; short currentRef = 0;
		if (pQueue->items[parentIndex]->reference.extRef >> 15 == 1)
			parentRef = pQueue->items[parentIndex]->reference.extRef & 255;
		else
			parentRef = pQueue->items[parentIndex]->reference.intRef;

		if (pQueue->items[currentIndex]->reference.extRef >> 15 == 1)
			currentRef = pQueue->items[currentIndex]->reference.extRef & 255;
		else
			currentRef = pQueue->items[currentIndex]->reference.intRef;
		if (parentRef > currentRef)
		{
			StudentInfo* aux = pQueue->items[currentIndex];
			pQueue->items[currentIndex] = pQueue->items[parentIndex];
			pQueue->items[parentIndex] = aux;
			ReHeapUp(pQueue, parentIndex);
		}
	}
}


void ReHeapDown(PrioQueue* pQueue, int currentIndex)
{
	int leftChildIndex = 2 * currentIndex + 1;
	int rightChildIndex = 2 * currentIndex + 2;
	int minIndex = currentIndex;
	if (leftChildIndex < pQueue->currentIndex &&
		pQueue->items[leftChildIndex]->reference.intRef <
		pQueue->items[minIndex]->reference.intRef)
	{
		minIndex = leftChildIndex;
		if (rightChildIndex < pQueue->currentIndex &&
			pQueue->items[rightChildIndex]->reference.intRef <
			pQueue->items[minIndex]->reference.intRef)
			minIndex = rightChildIndex;

		if (minIndex != currentIndex)
		{
			StudentInfo* aux = pQueue->items[currentIndex];
			pQueue->items[currentIndex] = pQueue->items[minIndex];
			pQueue->items[minIndex] = aux;
			ReHeapDown(pQueue, minIndex);
		}
	}
}

void enqueue(PrioQueue* pQueue, StudentInfo* stud)
{
	//first initialization
	if (pQueue->items == NULL)
	{
		pQueue->items = (StudentInfo**)
			malloc(INITIAL_PQUEUE_SIZE * sizeof(StudentInfo*));
		memset(pQueue->items, NULL, INITIAL_PQUEUE_SIZE * sizeof(StudentInfo*));
		pQueue->queueSize = INITIAL_PQUEUE_SIZE;
	}
	pQueue->items[pQueue->currentIndex] = stud;
	ReHeapUp(pQueue, pQueue->currentIndex);
	pQueue->currentIndex++;
}

StudentInfo* dequeue(PrioQueue* pQueue)
{
	StudentInfo* result = NULL;
	if (pQueue->currentIndex > 0)
	{
		result = pQueue->items[0];
		pQueue->items[0] = pQueue->items[pQueue->currentIndex - 1];
		pQueue->currentIndex--;
		ReHeapDown(pQueue, 0);
	}
	return result;
}


void changePrio(PrioQueue* pQueue, int index, char newPrioRef)
{
	short oldPrioRef = pQueue->items[index]->reference.intRef;
	pQueue->items[index]->reference.intRef = newPrioRef;
	if (newPrioRef < oldPrioRef)
		ReHeapUp(pQueue, index);
	else
		ReHeapDown(pQueue, index);
}

