#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <malloc.h>
#include <string.h>
#include <stdlib.h>

union Reference
{
	unsigned char intRef;
	unsigned short extRef;
};

typedef union Reference RefInfo;

struct Student
{
	char* name;
	double income;
	RefInfo reference;
};

typedef struct Student StudentInfo;

struct ColList
{
	StudentInfo* info;
	struct ColList* next;
};

typedef struct ColList ColList;

struct HashTable
{
	ColList** buckets;
	int size;
};

typedef struct HashTable HashTable;

//useful info memory management
StudentInfo* createStudentInfo(const char*, double, unsigned short);
void* deleteStudentInfo(StudentInfo*);
void displayStudents(ColList**, int);
void displayStudent(StudentInfo*);
void displayBucket(ColList*);
int fhash(char*, int);
void putHT(HashTable*, StudentInfo*);
StudentInfo* getHT(HashTable, char*);
ColList* createNode(StudentInfo*);
#define LINE_SIZE 128
#define HT_INITIAL_SIZE 26

void main()
{
	FILE* pFile = fopen("Data.txt", "r");
	HashTable hashTable = { .buckets = NULL, .size = 0 };

	if (pFile)
	{
		StudentInfo* agenda[10];
		memset(agenda, 0, sizeof(agenda));
		char* token; char delimiter[] = ",\n";
		double income; unsigned short ref;
		char lineBuffer[LINE_SIZE], name[LINE_SIZE];
		int index = 0;
		while (fgets(lineBuffer, sizeof(lineBuffer), pFile))
		{
			token = strtok(lineBuffer, delimiter);
			strcpy(name, token);
			token = strtok(NULL, delimiter);
			income = atof(token);
			token = strtok(NULL, delimiter);
			ref = atoi(token);
			StudentInfo* stud = createStudentInfo(name, income, ref);
			putHT(&hashTable, stud);
		}
		displayStudents(hashTable.buckets, hashTable.size);

		char* key = "Golescu Ioan";
		StudentInfo* info = getHT(hashTable, key);
		displayStudent(info);
		fclose(pFile);
	}
}


StudentInfo* createStudentInfo(const char* name, double income, unsigned short ref)
{
	StudentInfo* result = NULL;

	result = (StudentInfo*)malloc(sizeof(StudentInfo));
	result->name = (char*)malloc(strlen(name) + 1);
	strcpy(result->name, name);
	result->income = income;
	result->reference.extRef = ref;
	return result;

}

void* deleteStudentInfo(StudentInfo* stud)
{
	if (stud != NULL)
	{
		free(stud->name);
		free(stud);
	}
	return NULL;
}

void displayStudents(ColList** buckets, int size)
{
	for (int i = 0; i < size; i++)
	{
		printf("Index: %d\n", i);
		displayBucket(buckets[i]);
	}
}

void displayStudent(StudentInfo* stud)
{
	if (stud)
	{
		printf("Name: %s, income: %f\n", stud->name, stud->income);
		if (stud->reference.extRef >> 15 == 1)
		{
			short uid = stud->reference.extRef >> 8 & 127;
			printf("University ref: %d\n", uid);
			printf("External ref: %d\n", stud->reference.extRef & 255);
		}
		else
		{
			printf("Internal ref: %d\n", stud->reference.intRef);
		}
	}
}

void displayBucket(ColList* list)
{
	if (list != NULL)
	{
		ColList* aux = list;
		do
		{
			displayStudent(aux->info);
			aux = aux->next;
		} while (aux != list);
	}
}

void insertBucket(ColList** list, StudentInfo* stud)
{
	if (*list == NULL)
	{
		*list = createNode(stud);
		(*list)->next = (*list);
	}
	else
	{
		ColList* node = createNode(stud);
		//inserare nod in lista simplu inlantuita circulara la inceput
		//node->next = (*list)->next;
		//(*list)->next = node;
		//inserare nod in lista simplu inlantuita circulara la sfarsit
		node->next = (*list)->next;
		(*list)->next = node;
		(*list) = node;
	}
}

int fhash(char* key, int size)
{
	return key[0] % size;
}

void putHT(HashTable* hashTable, StudentInfo* stud)
{
	if (hashTable->buckets == NULL)
	{
		hashTable->buckets = (ColList**)malloc(sizeof(ColList*) * HT_INITIAL_SIZE);
		hashTable->size = HT_INITIAL_SIZE;
		memset(hashTable->buckets, 0, sizeof(ColList*) * HT_INITIAL_SIZE);
	}
	//int index = stud->name[0] - 65;
	int index = fhash(stud->name, hashTable->size);
	//ColList* list = hashTable->buckets[index];
	insertBucket(&hashTable->buckets[index], stud);
}

StudentInfo* getHT(HashTable hashTable, char* key)
{
	StudentInfo* result = NULL;
	int index = fhash(key, hashTable.size);
	ColList* list = hashTable.buckets[index];
	if (list)
	{
		ColList* aux = list;
		do
		{
			if (strcmp(aux->info->name, key) == 0)
				return aux->info;
			aux = aux->next;
		} while (aux != list);
	}
	return result;
}


ColList* createNode(StudentInfo* stud)
{
	ColList* node = NULL;
	node = (ColList*)malloc(sizeof(ColList));
	node->next = NULL;
	node->info = stud;
	return node;
}
